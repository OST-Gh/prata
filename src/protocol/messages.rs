///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
use super::{StreamSize, Streamable};
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
pub struct Connect;
pub struct Disconnect;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
impl<T> Streamable for T
where
	T: AsRef<str>,
{
	const TYPE_HEADER: u8 = 0b0000_0000;
	const SIZE_HEADER: StreamSize = StreamSize::Unsized;

	#[inline(always)]
	fn content_as_stream(&self) -> &[u8] {
		self.as_ref()
			.as_bytes()
	}
}

impl Streamable for Connect {
	const TYPE_HEADER: u8 = 0b0010_0000;
	const SIZE_HEADER: StreamSize = StreamSize::from_byte_lossy(0b0000_0000);

	#[inline(always)]
	fn content_as_stream(&self) -> &[u8] {
		&[]
	}
}

impl Streamable for Disconnect {
	const TYPE_HEADER: u8 = 0b0100_0000;
	const SIZE_HEADER: StreamSize = StreamSize::from_byte_lossy(0b0000_0000);

	#[inline(always)]
	fn content_as_stream(&self) -> &[u8] {
		&[]
	}
}
