///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
use invoke::{Port, StartupOption};
use netspaces::IPv4Pns;
use std::io::{stdout, BufWriter, Write};
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
mod call;
mod client;
mod invoke;
mod netspaces;
mod protocol;
mod server;
mod test;
mod util;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// [202407161311+0200] TODO(by: @OST-Gh): move some stuffs from util into its own module.
fn main() -> util::Result<()> {
	let mut out = BufWriter::new(stdout().lock());
	let addr_spc = util::determine_address().map(IPv4Pns::try_from)??;
	dbg![StartupOption::new()];
	dbg![Port::new()];
	// [202407160951+0200] NOTE(by: @OST-Gh): current test code.
	out.write_all(b"\0")?;
	out.flush()?;
	Ok(())
}
