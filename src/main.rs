///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
use netspaces::{B24Ns192, IPv4Pns};
use std::io::{stdout, BufWriter, Result, Write};
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
mod call;
mod netspaces;
mod util;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
fn main() -> Result<()> {
	let mut iter = IPv4Pns::from(B24Ns192).into_iter();
	let mut out = BufWriter::new(stdout().lock());

	while !iter.has_ended() {
		for i in 0..8 {
			let Some(addr) = iter.next() else { unreachable!() };
			let space: &[u8] = if i == 0 { b"" } else { b" " };
			let separator: &[u8] = if i == 7 { b"" } else { b"," };

			out.write_all(
				&[
					space,
					addr.to_string()
						.as_bytes(),
					separator,
				]
				.concat(),
			)?;
		}
		if !iter.has_ended() {
			out.write_all(b"\n")?;
		}
	}
	out.write_all(b"\0")?;
	out.flush()?;
	Ok(())
}
